import tkinter as tk
import threading
from scapy.all import ARP, Ether, srp
import socket
import time
import atexit

# Global variables
stop_event = threading.Event()
scan_threads = []
stop_button = None  # Initialize the stop_button widget
def update_output_box(result_list):
    output_box_text.config(state=tk.NORMAL)
    output_box_text.delete("1.0", tk.END)
    for device in result_list:
        output_box_text.insert(tk.END, f"IP: {device['ip']} | MAC: {device['mac']} | Hostname: {device['hostname']}\n")
    output_box_text.see(tk.END)
    output_box_text.config(state=tk.DISABLED)
def scan_network(target_ip, result_list, lock, timeout=5):
    arp = ARP(pdst=target_ip)
    ether = Ether(dst="ff:ff:ff:ff:ff:ff")
    packet = ether / arp

    attempts = 3  # Number of attempts
    delay = 1  # Delay between attempts (in seconds)

    for _ in range(attempts):
        try:
            result = srp(packet, timeout=timeout, verbose=False)[0]

            devices = []
            for sent, received in result:
                ip_address = received.psrc
                mac_address = received.hwsrc
                try:
                    hostname = socket.gethostbyaddr(ip_address)[0]
                except socket.herror:
                    hostname = "N/A"
                devices.append({'ip': ip_address, 'mac': mac_address, 'hostname': hostname})

            with lock:
                result_list.extend(devices)
                update_output_box(result_list)  # Update output box with scan results
            break  # Stop attempting once successful scan
        except Exception as e:
            print(f"Error during scanning attempt: {e}")
            time.sleep(delay)  # Introduce a delay before next attempt
def start_scan(event=None):
    global scan_threads

    target_ip = entry_ip.get()
    output_box_text.delete("1.0", tk.END)

    stop_event.clear()
    scan_threads = []

    result_list = []
    lock = threading.Lock()

    scan_thread = threading.Thread(target=scan_network, args=(target_ip, result_list, lock))
    scan_thread.start()
    scan_threads.append(scan_thread)

    stop_button["state"] = "normal"

    # Schedule a periodic check for scan completion
    check_scan_completion(result_list)
def check_scan_completion(result_list):
    if scan_threads and not scan_threads[0].is_alive():
        stop_scan()
        update_output_box(result_list)  # Update output box with final results
    else:
        output_box_text.after(1000, check_scan_completion, result_list)
def stop_scan():
    global stop_event

    stop_event.set()

    for thread in scan_threads:
        if thread.is_alive():
            try:
                thread.join()
            except Exception as e:
                print(f"Error stopping thread: {e}")

    scan_threads.clear()

    stop_button["state"] = "disabled"
def stop_scan():
    global stop_event

    stop_event.set()

    for thread in scan_threads:
        if thread.is_alive():
            try:
                thread.join()
            except Exception as e:
                print(f"Error stopping thread: {e}")

    scan_threads.clear()

    stop_button["state"] = "disabled"
def exit_handler():
    stop_scan()

atexit.register(exit_handler)
def create_gui():
    global entry_ip, output_box_text, stop_button

    window = tk.Tk()
    window.title("Net Scan")

    label_ip = tk.Label(window, text="Enter IP Range:")
    label_ip.pack()

    entry_ip = tk.Entry(window, width=40)
    entry_ip.pack()

    stop_button = tk.Button(window, text="Stop Scan", command=stop_scan, state="disabled")
    stop_button.pack(padx=2, pady=5)

    output_box_frame = tk.Frame(window)
    output_box_frame.pack(fill=tk.BOTH, expand=True)

    output_box_scrollbar = tk.Scrollbar(output_box_frame, orient=tk.VERTICAL)
    output_box_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    output_box_text = tk.Text(output_box_frame, wrap=tk.WORD, yscrollcommand=output_box_scrollbar.set, height=10)
    output_box_text.pack(fill=tk.BOTH, expand=True)

    output_box_scrollbar.config(command=output_box_text.yview)

    try:
        window.protocol("WM_DELETE_WINDOW", exit_handler)  # Register exit handler
        window.bind('<Return>', start_scan)  # Bind Return key to start scan
        window.mainloop()
    except KeyboardInterrupt:
        stop_scan()
        print("Scan stopped by user.")
        window.destroy()

if __name__ == "__main__":
    create_gui()
