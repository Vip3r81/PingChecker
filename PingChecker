import tkinter as tk
from tkinter import filedialog
from tkinter import ttk
import threading
import time
import ping3
import socket
import datetime

class PingManager:  # Class to manage global variables
    def __init__(self):
        self.stop_event = threading.Event()
        self.ping_threads = []
        self.ip_list = []
        self.result_list = []
        self.lock = threading.Lock()


ping_manager = PingManager()  # Create an instance of the class


def start_ping():
    ping_interval = get_ping_interval()  # Get the ping interval from the entry box
    output_box_text.delete("1.0", tk.END)  # Clear the output box

    ping_manager.stop_event.clear()
    ping_manager.ping_threads.clear()
    ping_manager.result_list.clear()

    for ip_address in ping_manager.ip_list:
        try:
            ping_thread = threading.Thread(target=ping_host, args=(ip_address, ping_interval, ping_manager.result_list, ping_manager.lock))
            ping_thread.start()
            ping_manager.ping_threads.append(ping_thread)
        except Exception as e:
            print(f"Error starting ping thread: {e}")

    start_button["state"] = "disabled"
    stop_button["state"] = "normal"


def stop_ping():
    ping_manager.stop_event.set()  # Set the stop event to signal threads to stop

    for thread in ping_manager.ping_threads:
        if thread.is_alive():  # Check if the thread is actually alive before joining
            try:
                thread.join()
            except Exception as e:
                print(f"Error stopping thread: {e}")

    ping_manager.ping_threads = [thread for thread in ping_manager.ping_threads if thread.is_alive()]  # Filter out stopped threads

    start_button["state"] = "normal"
    stop_button["state"] = "disabled"


def clear_output():
    output_box_text.config(state=tk.NORMAL)
    output_box_text.delete("1.0", tk.END)
    output_box_text.config(state=tk.DISABLED)


def ping_host(ip_address, ping_interval, result_list, lock):
    global stop_event

    log_file = "ping_log.txt"  # Name of the log file

    while not stop_event.is_set():
        try:
            response_time = ping3.ping(ip_address, timeout=2)
        except (ping3.errors.TimeoutError, OSError):
            response_time = None
        except Exception as e:
            print(f"Error pinging {ip_address}: {str(e)}")
            response_time = None

        if response_time == 0:
            response_time = None

        current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        output = f"[{current_time}] Ping to {ip_address} - "
        if response_time is not None:
            output += f"Response time: {response_time:.5f} ms"
        else:
            output += "No response"

        with lock:
            result_list.append(output)

        if write_to_log_var.get():  # Check if the "Write to Log" checkbox is checked
            with open(log_file, 'a') as file:  # Open the file in append mode
                file.write(output + "\n")

        if not stop_event.is_set():  # Check if the thread was not stopped before updating the output
            output_box_text.after(0, update_output_box, result_list[:])  # Pass a copy of the result_list

        if ping_interval > 0:
            time.sleep(ping_interval)
        else:
            break


def update_output_box(result_list):
    output_box_text.config(state=tk.NORMAL)
    output_box_text.delete("1.0", tk.END)
    for result in result_list:
        output_box_text.insert(tk.END, result + "\n")
    output_box_text.see(tk.END)
    output_box_text.config(state=tk.DISABLED)


def add_ip(ip_list):
    ip_address = entry_ip.get()
    if ip_address and ip_address not in ip_list:
        ip_list.append(ip_address)
        ip_listbox.insert(tk.END, ip_address)
        entry_ip.delete(0, tk.END)


def remove_ip():
    try:
        selected_index = ip_listbox.curselection()
        if selected_index:
            index = int(selected_index[0])
            del ip_list[index]
            ip_listbox.delete(selected_index)
    except Exception as e:
        print(f"Error while removing IP address: {e}")


def get_ping_interval():
    interval = entry_interval.get()
    try:
        return float(interval) if interval else 1
    except ValueError:
        return 1  # Set default interval to 1 second if an invalid value is provided


def export_output():
    file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")])
    if file_path:
        with open(file_path, 'w') as file:
            file.write(output_box_text.get("1.0", tk.END))


def create_gui():
    global entry_ip, output_box_text, ip_listbox, ip_list, entry_interval, stop_event, ping_threads, start_button, stop_button, write_to_log_var
    #ip_list = []
    stop_event = threading.Event()
    #ping_threads = []

    window = tk.Tk()
    window.title("Ping Checker")

    label_ip = tk.Label(window, text="Enter IP Address or DNS:")
    label_ip.pack()

    entry_ip = tk.Entry(window, width=40)
    entry_ip.pack()

    button_frame = tk.Frame(window)
    button_frame.pack()

    add_button = tk.Button(button_frame, text="Add", command=lambda: add_ip(ping_manager.ip_list))
    add_button.pack(side=tk.LEFT, padx=2, pady=5)

    remove_button = tk.Button(button_frame, text="Remove", command=remove_ip)
    remove_button.pack(side=tk.LEFT, padx=2, pady=5)

    # Create a frame to hold the listbox and scrollbar
    list_frame = tk.Frame(window)
    list_frame.pack(fill=tk.BOTH, expand=False)

    # Create an inner frame to hold the listbox and scrollbar
    inner_frame = tk.Frame(list_frame)
    inner_frame.pack(expand=True, padx=5, pady=5)

    # Create a listbox to display the IP addresses
    global ip_listbox
    ip_listbox = tk.Listbox(inner_frame, selectmode=tk.SINGLE, width=40, height=5)  # Set the width to 30 characters
    ip_listbox.pack(side=tk.LEFT, expand=False)

    # Create a scrollbar for the listbox
    scrollbar = tk.Scrollbar(inner_frame, command=ip_listbox.yview)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    # Attach the scrollbar to the listbox
    ip_listbox.config(yscrollcommand=scrollbar.set)

    label_interval = tk.Label(window, text="Enter Ping Interval (seconds):")
    label_interval.pack()

    entry_interval = tk.Entry(window)
    entry_interval.insert(tk.END, "1")  # Default interval value
    entry_interval.pack()

    button_frame = tk.Frame(window)
    button_frame.pack()

    start_button = tk.Button(button_frame, text="Start", command=start_ping)
    start_button.pack(side=tk.LEFT, padx=2, pady=5)

    stop_button = tk.Button(button_frame, text="Stop", command=stop_ping, state="disabled")
    stop_button.pack(side=tk.LEFT, padx=2, pady=5)

    clear_button = tk.Button(button_frame, text="Clear", command=clear_output)
    clear_button.pack(side=tk.LEFT, padx=2, pady=5)

    write_to_log_var = tk.BooleanVar()
    write_to_log_checkbox = tk.Checkbutton(window, text="Write to Log in working directory (ping_log.txt)", variable=write_to_log_var)
    write_to_log_checkbox.pack(side="top", anchor="center", padx=5)

    output_box_frame = tk.Frame(window)
    output_box_frame.pack(fill=tk.BOTH, expand=True)

    output_box_scrollbar = ttk.Scrollbar(output_box_frame, orient=tk.VERTICAL)
    output_box_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    output_box_text = tk.Text(output_box_frame, wrap=tk.WORD, yscrollcommand=output_box_scrollbar.set, height=10)
    output_box_text.pack(fill=tk.BOTH, expand=True)

    output_box_scrollbar.config(command=output_box_text.yview)

    export_button = tk.Button(window, text="Export Output", command=export_output)
    export_button.pack(padx=2, pady=10)

    window.mainloop()


if __name__ == "__main__":
    try:
        create_gui()
    except KeyboardInterrupt:
        ping_manager.stop_event.set()
        for thread in ping_manager.ping_threads:
            thread.join()
