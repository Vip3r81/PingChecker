import tkinter as tk
from tkinter import filedialog
from tkinter import ttk
import threading
import time
import ping3
import datetime
import queue

# Global variables
stop_event = threading.Event()
ping_threads = []
ip_list = []
result_queue = queue.Queue()

def start_ping():
    """Starts pinging the hosts in the ip_list."""
    global ip_list, ping_threads, stop_event, result_queue
    ping_interval = get_ping_interval()
    output_box_text.delete("1.0", tk.END)

    stop_event.clear()
    result_queue = queue.Queue()

    for ip_address in ip_list:
        ping_thread = threading.Thread(target=ping_host, args=(ip_address, ping_interval, result_queue))
        ping_thread.start()
        ping_threads.append(ping_thread)

    start_button["state"] = "disabled"
    stop_button["state"] = "normal"
    window.after(100, update_output_box)

def stop_ping():
    """Stops all ping threads."""
    global stop_event, ping_threads

    stop_event.set()  # Signal the threads to stop

    for thread in ping_threads:
        thread.join()  # Wait for threads to finish gracefully

    ping_threads = []

    start_button["state"] = "normal"
    stop_button["state"] = "disabled"

def clear_output():
    """Clears the output box."""
    output_box_text.config(state=tk.NORMAL)
    output_box_text.delete("1.0", tk.END)
    output_box_text.config(state=tk.DISABLED)

def ping_host(ip_address, ping_interval, result_queue):
    """Pings a host and puts the result in the queue."""
    global stop_event

    log_file = "ping_log.txt"

    while not stop_event.is_set():  # Check the stop_event flag
        try:
            response_time = ping3.ping(ip_address, timeout=2)
        except (ping3.errors.TimeoutError, OSError):
            response_time = None
        except Exception as e:
            print(f"Error pinging {ip_address}: {str(e)}")
            response_time = None

        if response_time is None or response_time == 0:
            response_time = None  # Ensure consistent None for no response

        current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        output = f"[{current_time}] Ping to {ip_address} - "
        if response_time is not None:
            output += f"Response time: {response_time:.5f} ms"
        else:
            output += "No response"

        result_queue.put(output)

        if write_to_log_var.get():
            with open(log_file, 'a') as file:
                file.write(output + "\n")

        if ping_interval > 0:
            time.sleep(ping_interval)
        else:
            break

def update_output_box():
    """Updates the output box with results from the queue."""
    global result_queue

    try:
        while True:
            result = result_queue.get_nowait()
            output_box_text.config(state=tk.NORMAL)

            if "No response" in result:
                output_box_text.tag_config("error", foreground="red")
                output_box_text.insert(tk.END, result + "\n", "error")
            else:
                output_box_text.tag_config("success", foreground="green")
                output_box_text.insert(tk.END, result + "\n", "success")

            output_box_text.see(tk.END)
            output_box_text.config(state=tk.DISABLED)
    except queue.Empty:
        pass

    if not stop_event.is_set():
        window.after(100, update_output_box)

def add_ip():
    """Adds an IP address or DNS name to the list."""
    ip_address = entry_ip.get()
    if ip_address and ip_address not in ip_list:
        ip_list.append(ip_address)
        ip_listbox.insert(tk.END, ip_address)
        entry_ip.delete(0, tk.END)
        error_label.config(text="")  # Clear any previous error message

def remove_ip():
    """Removes the selected IP address from the list."""
    try:
        selected_index = ip_listbox.curselection()
        if selected_index:
            index = int(selected_index[0])
            del ip_list[index]
            ip_listbox.delete(selected_index)
    except Exception as e:
        print(f"Error while removing IP address: {e}")

def get_ping_interval():
    """Gets the ping interval from the entry field."""
    interval = entry_interval.get()
    try:
        return float(interval) if interval else 1
    except ValueError:
        print("Invalid ping interval. Using default value of 1 second.")
        return 1

def export_output():
    """Exports the output to a text file."""
    file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")])
    if file_path:
        with open(file_path, 'w') as file:
            file.write(output_box_text.get("1.0", tk.END))

def create_gui():
    """Creates the graphical user interface."""
    global entry_ip, output_box_text, ip_listbox, entry_interval, start_button, stop_button, write_to_log_var, window, error_label

    window = tk.Tk()
    window.title("Ping Checker")

    label_ip = tk.Label(window, text="Enter IP Address or DNS:")
    label_ip.pack()

    entry_ip = tk.Entry(window, width=40)
    entry_ip.pack()

    error_label = tk.Label(window, text="", fg="red")  # Label for error messages
    error_label.pack()

    button_frame = tk.Frame(window)
    button_frame.pack()

    add_button = tk.Button(button_frame, text="Add", command=add_ip)
    add_button.pack(side=tk.LEFT, padx=2, pady=5)

    remove_button = tk.Button(button_frame, text="Remove", command=remove_ip)
    remove_button.pack(side=tk.LEFT, padx=2, pady=5)

    list_frame = tk.Frame(window)
    list_frame.pack(fill=tk.BOTH, expand=False)

    inner_frame = tk.Frame(list_frame)
    inner_frame.pack(expand=True, padx=5, pady=5)

    global ip_listbox
    ip_listbox = tk.Listbox(inner_frame, selectmode=tk.SINGLE, width=40, height=5)
    ip_listbox.pack(side=tk.LEFT, expand=False)

    scrollbar = tk.Scrollbar(inner_frame, command=ip_listbox.yview)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    ip_listbox.config(yscrollcommand=scrollbar.set)

    label_interval = tk.Label(window, text="Enter Ping Interval (seconds):")
    label_interval.pack()

    entry_interval = tk.Entry(window)
    entry_interval.insert(tk.END, "1")
    entry_interval.pack()

    button_frame = tk.Frame(window)
    button_frame.pack()

    start_button = tk.Button(button_frame, text="Start", command=start_ping)
    start_button.pack(side=tk.LEFT, padx=2, pady=5)

    stop_button = tk.Button(button_frame, text="Stop", command=stop_ping, state="disabled")
    stop_button.pack(side=tk.LEFT, padx=2, pady=5)

    clear_button = tk.Button(button_frame, text="Clear", command=clear_output)
    clear_button.pack(side=tk.LEFT, padx=2, pady=5)

    write_to_log_var = tk.BooleanVar()
    write_to_log_checkbox = tk.Checkbutton(window, text="Write to Log in working directory (ping_log.txt)", variable=write_to_log_var)
    write_to_log_checkbox.pack(side="top", anchor="center", padx=5)

    output_box_frame = tk.Frame(window)
    output_box_frame.pack(fill=tk.BOTH, expand=True)

    output_box_scrollbar = ttk.Scrollbar(output_box_frame, orient=tk.VERTICAL)
    output_box_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    output_box_text = tk.Text(output_box_frame, wrap=tk.WORD, yscrollcommand=output_box_scrollbar.set, height=10)
    output_box_text.pack(fill=tk.BOTH, expand=True)

    output_box_scrollbar.config(command=output_box_text.yview)

    export_button = tk.Button(window, text="Export Output", command=export_output)
    export_button.pack(padx=2, pady=10)

    window.mainloop()

if __name__ == "__main__":
    try:
        create_gui()
    except KeyboardInterrupt:
        stop_event.set()
        for thread in ping_threads:
            thread.join()
